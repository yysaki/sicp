(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
        (error "FRONT called with an empty queue")
        (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr)
              (else
                (set! rear-ptr new-pair)
                (set-cdr! front-ptr new-pair)
                front-ptr))))
    (define (delete-queue!)
        (cond ((empty-queue?)
               (error "DELETE! called with an empty queue" queue))
              (else
                (set! front-ptr (cdr front-ptr))
                front-ptr)))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)))
    dispatch))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define q (make-queue))
(print ((q 'empty-queue?)))

(print ((q 'insert-queue!) 'a))
(print ((q 'insert-queue!) 'b))

(print ((q 'delete-queue!)))
(print ((q 'delete-queue!)))
